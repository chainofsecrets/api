# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StakingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def staking_delegators_delegator_addr_delegations_get(self, delegator_addr, **kwargs):  # noqa: E501
        """Get all delegations from a delegator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_get(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[Delegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_delegations_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_delegations_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_delegations_get_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Get all delegations from a delegator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_get_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[Delegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_delegations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_delegations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/delegations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Delegation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_delegations_post(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit delegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_post(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation delegation: The password of the account to remove from the KMS
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_delegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_delegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_delegations_post_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit delegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_post_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation delegation: The password of the account to remove from the KMS
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'delegation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_delegations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_delegations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delegation' in params:
            body_params = params['delegation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/delegations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_delegations_validator_addr_get(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query the current delegation between a delegator and a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_validator_addr_get(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: Delegation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query the current delegation between a delegator and a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: Delegation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_delegations_validator_addr_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_delegations_validator_addr_get`")  # noqa: E501
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_delegators_delegator_addr_delegations_validator_addr_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Delegation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_redelegations_post(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit a redelegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_redelegations_post(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation2 delegation: The sender and tx information
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_redelegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_redelegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_redelegations_post_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit a redelegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_redelegations_post_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation2 delegation: The sender and tx information
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'delegation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_redelegations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_redelegations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delegation' in params:
            body_params = params['delegation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/redelegations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_unbonding_delegations_get(self, delegator_addr, **kwargs):  # noqa: E501
        """Get all unbonding delegations from a delegator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_get(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[UnbondingDelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Get all unbonding delegations from a delegator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_get_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[UnbondingDelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_unbonding_delegations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_unbonding_delegations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UnbondingDelegation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_unbonding_delegations_post(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit an unbonding delegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_post(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation1 delegation: The password of the account to remove from the KMS
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Submit an unbonding delegation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_post_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param Delegation1 delegation: The password of the account to remove from the KMS
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'delegation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_unbonding_delegations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_unbonding_delegations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delegation' in params:
            body_params = params['delegation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query all unbonding delegations between a delegator and a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: UnbondingDelegationPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query all unbonding delegations between a delegator and a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get_with_http_info(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: UnbondingDelegationPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get`")  # noqa: E501
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_delegators_delegator_addr_unbonding_delegations_validator_addr_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnbondingDelegationPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_validators_get(self, delegator_addr, **kwargs):  # noqa: E501
        """Query all validators that a delegator is bonded to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_validators_get(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[Validator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_validators_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_validators_get_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_validators_get_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Query all validators that a delegator is bonded to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_validators_get_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: list[Validator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_validators_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_validators_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/validators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Validator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_delegators_delegator_addr_validators_validator_addr_get(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query a validator that a delegator is bonded to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_validators_validator_addr_get(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 ValAddress of Delegator (required)
        :return: Validator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query a validator that a delegator is bonded to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_delegators_delegator_addr_validators_validator_addr_get_with_http_info(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 ValAddress of Delegator (required)
        :return: Validator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_delegators_delegator_addr_validators_validator_addr_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `staking_delegators_delegator_addr_validators_validator_addr_get`")  # noqa: E501
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_delegators_delegator_addr_validators_validator_addr_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/delegators/{delegatorAddr}/validators/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Validator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_parameters_get(self, **kwargs):  # noqa: E501
        """Get the current staking parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_parameters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_parameters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staking_parameters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def staking_parameters_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current staking parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_parameters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_parameters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_pool_get(self, **kwargs):  # noqa: E501
        """Get the current state of the staking pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_pool_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_pool_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staking_pool_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def staking_pool_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current state of the staking pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_pool_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_pool_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/pool', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_redelegations_get(self, **kwargs):  # noqa: E501
        """Get all redelegations (filter by query params)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_redelegations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator: Bech32 AccAddress of Delegator
        :param str validator_from: Bech32 ValAddress of SrcValidator
        :param str validator_to: Bech32 ValAddress of DstValidator
        :return: list[Redelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_redelegations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staking_redelegations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def staking_redelegations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all redelegations (filter by query params)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_redelegations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator: Bech32 AccAddress of Delegator
        :param str validator_from: Bech32 ValAddress of SrcValidator
        :param str validator_to: Bech32 ValAddress of DstValidator
        :return: list[Redelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator', 'validator_from', 'validator_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_redelegations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delegator' in params:
            query_params.append(('delegator', params['delegator']))  # noqa: E501
        if 'validator_from' in params:
            query_params.append(('validator_from', params['validator_from']))  # noqa: E501
        if 'validator_to' in params:
            query_params.append(('validator_to', params['validator_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/redelegations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Redelegation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_validators_get(self, **kwargs):  # noqa: E501
        """Get all validator candidates. By default it returns only the bonded validators.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
        :param int page: The page number.
        :param int limit: The maximum number of items per page.
        :return: list[Validator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_validators_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staking_validators_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def staking_validators_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all validator candidates. By default it returns only the bonded validators.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
        :param int page: The page number.
        :param int limit: The maximum number of items per page.
        :return: list[Validator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_validators_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/validators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Validator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_validators_validator_addr_delegations_get(self, validator_addr, **kwargs):  # noqa: E501
        """Get all delegations from a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_delegations_get(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: list[Delegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_validators_validator_addr_delegations_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_validators_validator_addr_delegations_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_validators_validator_addr_delegations_get_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Get all delegations from a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_delegations_get_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: list[Delegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_validators_validator_addr_delegations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_validators_validator_addr_delegations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/validators/{validatorAddr}/delegations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Delegation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_validators_validator_addr_get(self, validator_addr, **kwargs):  # noqa: E501
        """Query the information from a single validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_get(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: Validator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_validators_validator_addr_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_validators_validator_addr_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_validators_validator_addr_get_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Query the information from a single validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_get_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: Validator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_validators_validator_addr_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_validators_validator_addr_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/validators/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Validator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staking_validators_validator_addr_unbonding_delegations_get(self, validator_addr, **kwargs):  # noqa: E501
        """Get all unbonding delegations from a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_unbonding_delegations_get(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: list[UnbondingDelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staking_validators_validator_addr_unbonding_delegations_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.staking_validators_validator_addr_unbonding_delegations_get_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def staking_validators_validator_addr_unbonding_delegations_get_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Get all unbonding delegations from a validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staking_validators_validator_addr_unbonding_delegations_get_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: list[UnbondingDelegation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staking_validators_validator_addr_unbonding_delegations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `staking_validators_validator_addr_unbonding_delegations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/staking/validators/{validatorAddr}/unbonding_delegations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UnbondingDelegation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
