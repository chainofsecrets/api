# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def txs_decode_post(self, tx, **kwargs):  # noqa: E501
        """Decode a transaction from the Amino wire format  # noqa: E501

        Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_decode_post(tx, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tx1 tx: The tx to decode (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.txs_decode_post_with_http_info(tx, **kwargs)  # noqa: E501
        else:
            (data) = self.txs_decode_post_with_http_info(tx, **kwargs)  # noqa: E501
            return data

    def txs_decode_post_with_http_info(self, tx, **kwargs):  # noqa: E501
        """Decode a transaction from the Amino wire format  # noqa: E501

        Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_decode_post_with_http_info(tx, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tx1 tx: The tx to decode (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method txs_decode_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tx' is set
        if ('tx' not in params or
                params['tx'] is None):
            raise ValueError("Missing the required parameter `tx` when calling `txs_decode_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tx' in params:
            body_params = params['tx']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/txs/decode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def txs_encode_post(self, tx, **kwargs):  # noqa: E501
        """Encode a transaction to the Amino wire format  # noqa: E501

        Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_encode_post(tx, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tx tx: The tx to encode (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.txs_encode_post_with_http_info(tx, **kwargs)  # noqa: E501
        else:
            (data) = self.txs_encode_post_with_http_info(tx, **kwargs)  # noqa: E501
            return data

    def txs_encode_post_with_http_info(self, tx, **kwargs):  # noqa: E501
        """Encode a transaction to the Amino wire format  # noqa: E501

        Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_encode_post_with_http_info(tx, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tx tx: The tx to encode (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method txs_encode_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tx' is set
        if ('tx' not in params or
                params['tx'] is None):
            raise ValueError("Missing the required parameter `tx` when calling `txs_encode_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tx' in params:
            body_params = params['tx']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/txs/encode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def txs_get(self, **kwargs):  # noqa: E501
        """Search transactions  # noqa: E501

        Search transactions by events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_action: transaction events such as 'message.action=send' which results in the following endpoint: 'GET /txs?message.action=send'. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
        :param str message_sender: transaction tags with sender: 'GET /txs?message.action=send&message.sender=secret16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv'
        :param int page: Page number
        :param int limit: Maximum number of items per page
        :param int tx_minheight: transactions on blocks with height greater or equal this value
        :param int tx_maxheight: transactions on blocks with height less than or equal this value
        :return: PaginatedQueryTxs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.txs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.txs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def txs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search transactions  # noqa: E501

        Search transactions by events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_action: transaction events such as 'message.action=send' which results in the following endpoint: 'GET /txs?message.action=send'. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
        :param str message_sender: transaction tags with sender: 'GET /txs?message.action=send&message.sender=secret16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv'
        :param int page: Page number
        :param int limit: Maximum number of items per page
        :param int tx_minheight: transactions on blocks with height greater or equal this value
        :param int tx_maxheight: transactions on blocks with height less than or equal this value
        :return: PaginatedQueryTxs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_action', 'message_sender', 'page', 'limit', 'tx_minheight', 'tx_maxheight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method txs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'message_action' in params:
            query_params.append(('message.action', params['message_action']))  # noqa: E501
        if 'message_sender' in params:
            query_params.append(('message.sender', params['message_sender']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'tx_minheight' in params:
            query_params.append(('tx.minheight', params['tx_minheight']))  # noqa: E501
        if 'tx_maxheight' in params:
            query_params.append(('tx.maxheight', params['tx_maxheight']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/txs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedQueryTxs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def txs_hash_get(self, hash, **kwargs):  # noqa: E501
        """Get a Tx by hash  # noqa: E501

        Retrieve a transaction using its hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_hash_get(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: Tx hash (required)
        :return: TxQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.txs_hash_get_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.txs_hash_get_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def txs_hash_get_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Get a Tx by hash  # noqa: E501

        Retrieve a transaction using its hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_hash_get_with_http_info(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: Tx hash (required)
        :return: TxQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method txs_hash_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `txs_hash_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/txs/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TxQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def txs_post(self, tx_broadcast, **kwargs):  # noqa: E501
        """Broadcast a signed tx  # noqa: E501

        Broadcast a signed tx to a full node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_post(tx_broadcast, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TxBroadcast tx_broadcast: The tx must be a signed StdTx. The supported broadcast modes include `\"block\"`(return after tx commit), `\"sync\"`(return afer CheckTx) and `\"async\"`(return right away). (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.txs_post_with_http_info(tx_broadcast, **kwargs)  # noqa: E501
        else:
            (data) = self.txs_post_with_http_info(tx_broadcast, **kwargs)  # noqa: E501
            return data

    def txs_post_with_http_info(self, tx_broadcast, **kwargs):  # noqa: E501
        """Broadcast a signed tx  # noqa: E501

        Broadcast a signed tx to a full node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.txs_post_with_http_info(tx_broadcast, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TxBroadcast tx_broadcast: The tx must be a signed StdTx. The supported broadcast modes include `\"block\"`(return after tx commit), `\"sync\"`(return afer CheckTx) and `\"async\"`(return right away). (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_broadcast']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method txs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tx_broadcast' is set
        if ('tx_broadcast' not in params or
                params['tx_broadcast'] is None):
            raise ValueError("Missing the required parameter `tx_broadcast` when calling `txs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tx_broadcast' in params:
            body_params = params['tx_broadcast']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/txs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
