# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BaseReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'memo': 'str',
        'chain_id': 'str',
        'account_number': 'str',
        'sequence': 'str',
        'gas': 'str',
        'gas_adjustment': 'str',
        'fees': 'list[Coin]',
        'simulate': 'bool'
    }

    attribute_map = {
        '_from': 'from',
        'memo': 'memo',
        'chain_id': 'chain_id',
        'account_number': 'account_number',
        'sequence': 'sequence',
        'gas': 'gas',
        'gas_adjustment': 'gas_adjustment',
        'fees': 'fees',
        'simulate': 'simulate'
    }

    def __init__(self, _from=None, memo=None, chain_id=None, account_number=None, sequence=None, gas=None, gas_adjustment=None, fees=None, simulate=None):  # noqa: E501
        """BaseReq - a model defined in Swagger"""  # noqa: E501

        self.__from = None
        self._memo = None
        self._chain_id = None
        self._account_number = None
        self._sequence = None
        self._gas = None
        self._gas_adjustment = None
        self._fees = None
        self._simulate = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if memo is not None:
            self.memo = memo
        if chain_id is not None:
            self.chain_id = chain_id
        if account_number is not None:
            self.account_number = account_number
        if sequence is not None:
            self.sequence = sequence
        if gas is not None:
            self.gas = gas
        if gas_adjustment is not None:
            self.gas_adjustment = gas_adjustment
        if fees is not None:
            self.fees = fees
        if simulate is not None:
            self.simulate = simulate

    @property
    def _from(self):
        """Gets the _from of this BaseReq.  # noqa: E501

        Sender address or Keybase name to generate a transaction  # noqa: E501

        :return: The _from of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BaseReq.

        Sender address or Keybase name to generate a transaction  # noqa: E501

        :param _from: The _from of this BaseReq.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def memo(self):
        """Gets the memo of this BaseReq.  # noqa: E501


        :return: The memo of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this BaseReq.


        :param memo: The memo of this BaseReq.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def chain_id(self):
        """Gets the chain_id of this BaseReq.  # noqa: E501


        :return: The chain_id of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this BaseReq.


        :param chain_id: The chain_id of this BaseReq.  # noqa: E501
        :type: str
        """

        self._chain_id = chain_id

    @property
    def account_number(self):
        """Gets the account_number of this BaseReq.  # noqa: E501


        :return: The account_number of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BaseReq.


        :param account_number: The account_number of this BaseReq.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def sequence(self):
        """Gets the sequence of this BaseReq.  # noqa: E501


        :return: The sequence of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this BaseReq.


        :param sequence: The sequence of this BaseReq.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def gas(self):
        """Gets the gas of this BaseReq.  # noqa: E501


        :return: The gas of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this BaseReq.


        :param gas: The gas of this BaseReq.  # noqa: E501
        :type: str
        """

        self._gas = gas

    @property
    def gas_adjustment(self):
        """Gets the gas_adjustment of this BaseReq.  # noqa: E501


        :return: The gas_adjustment of this BaseReq.  # noqa: E501
        :rtype: str
        """
        return self._gas_adjustment

    @gas_adjustment.setter
    def gas_adjustment(self, gas_adjustment):
        """Sets the gas_adjustment of this BaseReq.


        :param gas_adjustment: The gas_adjustment of this BaseReq.  # noqa: E501
        :type: str
        """

        self._gas_adjustment = gas_adjustment

    @property
    def fees(self):
        """Gets the fees of this BaseReq.  # noqa: E501


        :return: The fees of this BaseReq.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this BaseReq.


        :param fees: The fees of this BaseReq.  # noqa: E501
        :type: list[Coin]
        """

        self._fees = fees

    @property
    def simulate(self):
        """Gets the simulate of this BaseReq.  # noqa: E501

        Estimate gas for a transaction (cannot be used in conjunction with generate_only)  # noqa: E501

        :return: The simulate of this BaseReq.  # noqa: E501
        :rtype: bool
        """
        return self._simulate

    @simulate.setter
    def simulate(self, simulate):
        """Sets the simulate of this BaseReq.

        Estimate gas for a transaction (cannot be used in conjunction with generate_only)  # noqa: E501

        :param simulate: The simulate of this BaseReq.  # noqa: E501
        :type: bool
        """

        self._simulate = simulate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
