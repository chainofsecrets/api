# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loose_tokens': 'str',
        'bonded_tokens': 'str',
        'inflation_last_time': 'str',
        'inflation': 'str',
        'date_last_commission_reset': 'str',
        'prev_bonded_shares': 'str'
    }

    attribute_map = {
        'loose_tokens': 'loose_tokens',
        'bonded_tokens': 'bonded_tokens',
        'inflation_last_time': 'inflation_last_time',
        'inflation': 'inflation',
        'date_last_commission_reset': 'date_last_commission_reset',
        'prev_bonded_shares': 'prev_bonded_shares'
    }

    def __init__(self, loose_tokens=None, bonded_tokens=None, inflation_last_time=None, inflation=None, date_last_commission_reset=None, prev_bonded_shares=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501

        self._loose_tokens = None
        self._bonded_tokens = None
        self._inflation_last_time = None
        self._inflation = None
        self._date_last_commission_reset = None
        self._prev_bonded_shares = None
        self.discriminator = None

        if loose_tokens is not None:
            self.loose_tokens = loose_tokens
        if bonded_tokens is not None:
            self.bonded_tokens = bonded_tokens
        if inflation_last_time is not None:
            self.inflation_last_time = inflation_last_time
        if inflation is not None:
            self.inflation = inflation
        if date_last_commission_reset is not None:
            self.date_last_commission_reset = date_last_commission_reset
        if prev_bonded_shares is not None:
            self.prev_bonded_shares = prev_bonded_shares

    @property
    def loose_tokens(self):
        """Gets the loose_tokens of this InlineResponse2005.  # noqa: E501


        :return: The loose_tokens of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._loose_tokens

    @loose_tokens.setter
    def loose_tokens(self, loose_tokens):
        """Sets the loose_tokens of this InlineResponse2005.


        :param loose_tokens: The loose_tokens of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._loose_tokens = loose_tokens

    @property
    def bonded_tokens(self):
        """Gets the bonded_tokens of this InlineResponse2005.  # noqa: E501


        :return: The bonded_tokens of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._bonded_tokens

    @bonded_tokens.setter
    def bonded_tokens(self, bonded_tokens):
        """Sets the bonded_tokens of this InlineResponse2005.


        :param bonded_tokens: The bonded_tokens of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._bonded_tokens = bonded_tokens

    @property
    def inflation_last_time(self):
        """Gets the inflation_last_time of this InlineResponse2005.  # noqa: E501


        :return: The inflation_last_time of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._inflation_last_time

    @inflation_last_time.setter
    def inflation_last_time(self, inflation_last_time):
        """Sets the inflation_last_time of this InlineResponse2005.


        :param inflation_last_time: The inflation_last_time of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._inflation_last_time = inflation_last_time

    @property
    def inflation(self):
        """Gets the inflation of this InlineResponse2005.  # noqa: E501


        :return: The inflation of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._inflation

    @inflation.setter
    def inflation(self, inflation):
        """Sets the inflation of this InlineResponse2005.


        :param inflation: The inflation of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._inflation = inflation

    @property
    def date_last_commission_reset(self):
        """Gets the date_last_commission_reset of this InlineResponse2005.  # noqa: E501


        :return: The date_last_commission_reset of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._date_last_commission_reset

    @date_last_commission_reset.setter
    def date_last_commission_reset(self, date_last_commission_reset):
        """Sets the date_last_commission_reset of this InlineResponse2005.


        :param date_last_commission_reset: The date_last_commission_reset of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._date_last_commission_reset = date_last_commission_reset

    @property
    def prev_bonded_shares(self):
        """Gets the prev_bonded_shares of this InlineResponse2005.  # noqa: E501


        :return: The prev_bonded_shares of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._prev_bonded_shares

    @prev_bonded_shares.setter
    def prev_bonded_shares(self, prev_bonded_shares):
        """Sets the prev_bonded_shares of this InlineResponse2005.


        :param prev_bonded_shares: The prev_bonded_shares of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._prev_bonded_shares = prev_bonded_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
