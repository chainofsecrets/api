# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2007(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_evidence_age': 'str',
        'signed_blocks_window': 'str',
        'min_signed_per_window': 'str',
        'double_sign_unbond_duration': 'str',
        'downtime_unbond_duration': 'str',
        'slash_fraction_double_sign': 'str',
        'slash_fraction_downtime': 'str'
    }

    attribute_map = {
        'max_evidence_age': 'max_evidence_age',
        'signed_blocks_window': 'signed_blocks_window',
        'min_signed_per_window': 'min_signed_per_window',
        'double_sign_unbond_duration': 'double_sign_unbond_duration',
        'downtime_unbond_duration': 'downtime_unbond_duration',
        'slash_fraction_double_sign': 'slash_fraction_double_sign',
        'slash_fraction_downtime': 'slash_fraction_downtime'
    }

    def __init__(self, max_evidence_age=None, signed_blocks_window=None, min_signed_per_window=None, double_sign_unbond_duration=None, downtime_unbond_duration=None, slash_fraction_double_sign=None, slash_fraction_downtime=None):  # noqa: E501
        """InlineResponse2007 - a model defined in Swagger"""  # noqa: E501

        self._max_evidence_age = None
        self._signed_blocks_window = None
        self._min_signed_per_window = None
        self._double_sign_unbond_duration = None
        self._downtime_unbond_duration = None
        self._slash_fraction_double_sign = None
        self._slash_fraction_downtime = None
        self.discriminator = None

        if max_evidence_age is not None:
            self.max_evidence_age = max_evidence_age
        if signed_blocks_window is not None:
            self.signed_blocks_window = signed_blocks_window
        if min_signed_per_window is not None:
            self.min_signed_per_window = min_signed_per_window
        if double_sign_unbond_duration is not None:
            self.double_sign_unbond_duration = double_sign_unbond_duration
        if downtime_unbond_duration is not None:
            self.downtime_unbond_duration = downtime_unbond_duration
        if slash_fraction_double_sign is not None:
            self.slash_fraction_double_sign = slash_fraction_double_sign
        if slash_fraction_downtime is not None:
            self.slash_fraction_downtime = slash_fraction_downtime

    @property
    def max_evidence_age(self):
        """Gets the max_evidence_age of this InlineResponse2007.  # noqa: E501


        :return: The max_evidence_age of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._max_evidence_age

    @max_evidence_age.setter
    def max_evidence_age(self, max_evidence_age):
        """Sets the max_evidence_age of this InlineResponse2007.


        :param max_evidence_age: The max_evidence_age of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._max_evidence_age = max_evidence_age

    @property
    def signed_blocks_window(self):
        """Gets the signed_blocks_window of this InlineResponse2007.  # noqa: E501


        :return: The signed_blocks_window of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._signed_blocks_window

    @signed_blocks_window.setter
    def signed_blocks_window(self, signed_blocks_window):
        """Sets the signed_blocks_window of this InlineResponse2007.


        :param signed_blocks_window: The signed_blocks_window of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._signed_blocks_window = signed_blocks_window

    @property
    def min_signed_per_window(self):
        """Gets the min_signed_per_window of this InlineResponse2007.  # noqa: E501


        :return: The min_signed_per_window of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._min_signed_per_window

    @min_signed_per_window.setter
    def min_signed_per_window(self, min_signed_per_window):
        """Sets the min_signed_per_window of this InlineResponse2007.


        :param min_signed_per_window: The min_signed_per_window of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._min_signed_per_window = min_signed_per_window

    @property
    def double_sign_unbond_duration(self):
        """Gets the double_sign_unbond_duration of this InlineResponse2007.  # noqa: E501


        :return: The double_sign_unbond_duration of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._double_sign_unbond_duration

    @double_sign_unbond_duration.setter
    def double_sign_unbond_duration(self, double_sign_unbond_duration):
        """Sets the double_sign_unbond_duration of this InlineResponse2007.


        :param double_sign_unbond_duration: The double_sign_unbond_duration of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._double_sign_unbond_duration = double_sign_unbond_duration

    @property
    def downtime_unbond_duration(self):
        """Gets the downtime_unbond_duration of this InlineResponse2007.  # noqa: E501


        :return: The downtime_unbond_duration of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._downtime_unbond_duration

    @downtime_unbond_duration.setter
    def downtime_unbond_duration(self, downtime_unbond_duration):
        """Sets the downtime_unbond_duration of this InlineResponse2007.


        :param downtime_unbond_duration: The downtime_unbond_duration of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._downtime_unbond_duration = downtime_unbond_duration

    @property
    def slash_fraction_double_sign(self):
        """Gets the slash_fraction_double_sign of this InlineResponse2007.  # noqa: E501


        :return: The slash_fraction_double_sign of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._slash_fraction_double_sign

    @slash_fraction_double_sign.setter
    def slash_fraction_double_sign(self, slash_fraction_double_sign):
        """Sets the slash_fraction_double_sign of this InlineResponse2007.


        :param slash_fraction_double_sign: The slash_fraction_double_sign of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._slash_fraction_double_sign = slash_fraction_double_sign

    @property
    def slash_fraction_downtime(self):
        """Gets the slash_fraction_downtime of this InlineResponse2007.  # noqa: E501


        :return: The slash_fraction_downtime of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._slash_fraction_downtime

    @slash_fraction_downtime.setter
    def slash_fraction_downtime(self, slash_fraction_downtime):
        """Sets the slash_fraction_downtime of this InlineResponse2007.


        :param slash_fraction_downtime: The slash_fraction_downtime of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._slash_fraction_downtime = slash_fraction_downtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
