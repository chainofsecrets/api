# coding: utf-8

"""
    API for Secret Network by ChainofSecrets.org

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TextProposal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proposal_id': 'int',
        'title': 'str',
        'description': 'str',
        'proposal_type': 'str',
        'proposal_status': 'str',
        'final_tally_result': 'TallyResult',
        'submit_time': 'str',
        'total_deposit': 'list[Coin]',
        'voting_start_time': 'str'
    }

    attribute_map = {
        'proposal_id': 'proposal_id',
        'title': 'title',
        'description': 'description',
        'proposal_type': 'proposal_type',
        'proposal_status': 'proposal_status',
        'final_tally_result': 'final_tally_result',
        'submit_time': 'submit_time',
        'total_deposit': 'total_deposit',
        'voting_start_time': 'voting_start_time'
    }

    def __init__(self, proposal_id=None, title=None, description=None, proposal_type=None, proposal_status=None, final_tally_result=None, submit_time=None, total_deposit=None, voting_start_time=None):  # noqa: E501
        """TextProposal - a model defined in Swagger"""  # noqa: E501

        self._proposal_id = None
        self._title = None
        self._description = None
        self._proposal_type = None
        self._proposal_status = None
        self._final_tally_result = None
        self._submit_time = None
        self._total_deposit = None
        self._voting_start_time = None
        self.discriminator = None

        if proposal_id is not None:
            self.proposal_id = proposal_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if proposal_type is not None:
            self.proposal_type = proposal_type
        if proposal_status is not None:
            self.proposal_status = proposal_status
        if final_tally_result is not None:
            self.final_tally_result = final_tally_result
        if submit_time is not None:
            self.submit_time = submit_time
        if total_deposit is not None:
            self.total_deposit = total_deposit
        if voting_start_time is not None:
            self.voting_start_time = voting_start_time

    @property
    def proposal_id(self):
        """Gets the proposal_id of this TextProposal.  # noqa: E501


        :return: The proposal_id of this TextProposal.  # noqa: E501
        :rtype: int
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this TextProposal.


        :param proposal_id: The proposal_id of this TextProposal.  # noqa: E501
        :type: int
        """

        self._proposal_id = proposal_id

    @property
    def title(self):
        """Gets the title of this TextProposal.  # noqa: E501


        :return: The title of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TextProposal.


        :param title: The title of this TextProposal.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this TextProposal.  # noqa: E501


        :return: The description of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TextProposal.


        :param description: The description of this TextProposal.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def proposal_type(self):
        """Gets the proposal_type of this TextProposal.  # noqa: E501


        :return: The proposal_type of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._proposal_type

    @proposal_type.setter
    def proposal_type(self, proposal_type):
        """Sets the proposal_type of this TextProposal.


        :param proposal_type: The proposal_type of this TextProposal.  # noqa: E501
        :type: str
        """

        self._proposal_type = proposal_type

    @property
    def proposal_status(self):
        """Gets the proposal_status of this TextProposal.  # noqa: E501


        :return: The proposal_status of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._proposal_status

    @proposal_status.setter
    def proposal_status(self, proposal_status):
        """Sets the proposal_status of this TextProposal.


        :param proposal_status: The proposal_status of this TextProposal.  # noqa: E501
        :type: str
        """

        self._proposal_status = proposal_status

    @property
    def final_tally_result(self):
        """Gets the final_tally_result of this TextProposal.  # noqa: E501


        :return: The final_tally_result of this TextProposal.  # noqa: E501
        :rtype: TallyResult
        """
        return self._final_tally_result

    @final_tally_result.setter
    def final_tally_result(self, final_tally_result):
        """Sets the final_tally_result of this TextProposal.


        :param final_tally_result: The final_tally_result of this TextProposal.  # noqa: E501
        :type: TallyResult
        """

        self._final_tally_result = final_tally_result

    @property
    def submit_time(self):
        """Gets the submit_time of this TextProposal.  # noqa: E501


        :return: The submit_time of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this TextProposal.


        :param submit_time: The submit_time of this TextProposal.  # noqa: E501
        :type: str
        """

        self._submit_time = submit_time

    @property
    def total_deposit(self):
        """Gets the total_deposit of this TextProposal.  # noqa: E501


        :return: The total_deposit of this TextProposal.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._total_deposit

    @total_deposit.setter
    def total_deposit(self, total_deposit):
        """Sets the total_deposit of this TextProposal.


        :param total_deposit: The total_deposit of this TextProposal.  # noqa: E501
        :type: list[Coin]
        """

        self._total_deposit = total_deposit

    @property
    def voting_start_time(self):
        """Gets the voting_start_time of this TextProposal.  # noqa: E501


        :return: The voting_start_time of this TextProposal.  # noqa: E501
        :rtype: str
        """
        return self._voting_start_time

    @voting_start_time.setter
    def voting_start_time(self, voting_start_time):
        """Sets the voting_start_time of this TextProposal.


        :param voting_start_time: The voting_start_time of this TextProposal.  # noqa: E501
        :type: str
        """

        self._voting_start_time = voting_start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
